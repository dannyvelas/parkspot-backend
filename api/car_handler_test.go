package api

import (
	"errors"
	"fmt"
	"github.com/dannyvelas/lasvistas_api/app"
	"github.com/dannyvelas/lasvistas_api/config"
	"github.com/dannyvelas/lasvistas_api/errs"
	"github.com/dannyvelas/lasvistas_api/models"
	"github.com/imdario/mergo"
	"github.com/rs/zerolog/log"
	"github.com/stretchr/testify/suite"
	"net/http"
	"net/http/httptest"
	"testing"
)

type carRouterSuite struct {
	suite.Suite
	app        app.App
	testServer *httptest.Server
	adminJWT   string
}

func TestCarRouter(t *testing.T) {
	suite.Run(t, new(carRouterSuite))
}

func (suite *carRouterSuite) SetupSuite() {
	c, err := config.NewConfig()
	if err != nil {
		log.Fatal().Msg(err.Error())
	}

	suite.app, err = app.NewApp(c)
	if err != nil {
		log.Fatal().Msgf("Failed to initialize app: %v", err)
	}

	router := newRouter(c, suite.app)
	suite.testServer = httptest.NewServer(router)

	suite.adminJWT, err = suite.app.JWTService.NewAccess("some-uuid", models.AdminRole)
	if err != nil {
		log.Fatal().Msgf("Failed to create JWT: %v", err)
	}

	// needed so that car creations work as they require a resident_id foreign key
	if err := suite.app.ResidentService.Create(testResident); err != nil {
		suite.NoError(fmt.Errorf("Error creating test resident before running test: %v", err))
		return
	}
}

func (suite carRouterSuite) TearDownSuite() {
	defer suite.testServer.Close()

	if err := suite.app.ResidentService.Delete(testResident.ID); err != nil {
		log.Fatal().Msgf("Error deleting test resident after running test: %v", err)
	}
}

func (suite carRouterSuite) TestEdit_CarDNE_Negative() {
	request := models.Car{LicensePlate: "NEWLP"}

	endpoint := fmt.Sprintf("%s/api/car/%s", suite.testServer.URL, "9b6d89a6-0b66-4170-be8d-eba43f8bf478")
	_, err := authenticatedReq[models.Car, models.Car]("PUT", endpoint, suite.adminJWT, &request)
	if err == nil {
		suite.NoError(fmt.Errorf("No error encountered when editing a non-existing car"))
		return
	}

	var apiErr *errs.ApiErr
	if !errors.As(err, &apiErr) {
		suite.NoError(fmt.Errorf("Couldn't cast error to apiErr. Error is: %v", err))
		return
	}

	suite.Equal(http.StatusNotFound, apiErr.StatusCode, "response was: %v", apiErr.Error())
}

func (suite carRouterSuite) TestEdit_Car_Positive() {
	type test struct {
		request  models.Car
		expected models.Car
	}

	tests := map[string]test{
		"licensePlate":              {request: models.Car{LicensePlate: "NEWLICENSEPLATE"}},
		"licensePlate, color":       {request: models.Car{LicensePlate: "NEWLICENSEPLATE", Color: "NEWCOLOR"}},
		"licensePlate, color, make": {request: models.Car{LicensePlate: "NEWLICENSEPLATE", Color: "NEWCOLOR", Make: "NEWMAKE"}},
		"model":                     {request: models.Car{Model: "NEWMODEL"}},
	}
	for testName, test_ := range tests {
		expected := test_.request
		if err := mergo.Merge(&expected, testCar); err != nil {
			suite.NoError(fmt.Errorf("error merging when preparing test: %v\n", err))
			return
		}
		tests[testName] = test{request: test_.request, expected: expected}
	}

	executeTest := func(test test) error {
		endpoint := fmt.Sprintf("%s/api/car/%s", suite.testServer.URL, testCar.ID)
		carResp, err := authenticatedReq[models.Car, models.Car]("PUT", endpoint, suite.adminJWT, &test.request)
		if err != nil {
			return fmt.Errorf("Error making request: %v", err)
		}

		// not checking if test.expected.ID == carResp.ID because carResp.ID is randomly generated by database
		suite.Equal(test.expected.LicensePlate, carResp.LicensePlate)
		suite.Equal(test.expected.Color, carResp.Color)
		suite.Equal(test.expected.Make, carResp.Make)
		suite.Equal(test.expected.Model, carResp.Model)

		return nil
	}

	for testName, test := range tests {
		createdCar, err := suite.app.CarService.Create(testCar)
		if err != nil {
			suite.NoError(fmt.Errorf("Error creating test car before running test: %v", err))
			break
		}

		if err := executeTest(test); err != nil {
			suite.NoError(fmt.Errorf("%s failed: %v", testName, err))
		}

		if err := suite.app.CarService.Delete(createdCar.ID); err != nil {
			suite.NoError(fmt.Errorf("Error deleting test car after running test: %v", err))
			break
		}
	}
}
